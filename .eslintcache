[{"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\App.tsx":"1","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\routes\\routes.tsx":"2","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\routes\\Routes.tsx":"3","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\index.tsx":"4","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\NavbarComp.tsx":"5","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\index.ts":"6","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\reducers\\regionReducer.ts":"7","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\store.ts":"8","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\actions\\regionAction.ts":"9","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\constants\\regionConstants.ts":"10","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\pages\\index.ts":"11","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\Footer.tsx":"12","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\pages\\SearchPage.tsx":"13","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\config\\index.ts":"14","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\reducers\\initialDataReducer.ts":"15","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\actions\\initialDataAction.ts":"16","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\constants\\initialDataConstants.ts":"17","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\pages\\MainPage.tsx":"18","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\UserMatchHistory.tsx":"19","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\MatchedGameDetail.tsx":"20","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\Loading.tsx":"21"},{"size":544,"mtime":1611648439181,"results":"22","hashOfConfig":"23"},{"size":920,"mtime":1611715078226,"results":"24","hashOfConfig":"23"},{"size":312,"mtime":1611557622869,"results":"25","hashOfConfig":"23"},{"size":315,"mtime":1611564486307,"results":"26","hashOfConfig":"23"},{"size":2484,"mtime":1611570862770,"results":"27","hashOfConfig":"23"},{"size":56,"mtime":1611565676647,"results":"28","hashOfConfig":"23"},{"size":514,"mtime":1611570511222,"results":"29","hashOfConfig":"23"},{"size":1257,"mtime":1611648321357,"results":"30","hashOfConfig":"23"},{"size":202,"mtime":1611563899045,"results":"31","hashOfConfig":"23"},{"size":47,"mtime":1611562747301,"results":"32","hashOfConfig":"23"},{"size":58,"mtime":1611568796570,"results":"33","hashOfConfig":"23"},{"size":2873,"mtime":1611566683020,"results":"34","hashOfConfig":"23"},{"size":16184,"mtime":1611824547352,"results":"35","hashOfConfig":"23"},{"size":1758,"mtime":1611801884582,"results":"36","hashOfConfig":"23"},{"size":3170,"mtime":1611648303996,"results":"37","hashOfConfig":"23"},{"size":1226,"mtime":1611716501418,"results":"38","hashOfConfig":"23"},{"size":133,"mtime":1611646037399,"results":"39","hashOfConfig":"23"},{"size":917,"mtime":1611565233072,"results":"40","hashOfConfig":"23"},{"size":20479,"mtime":1611825333337,"results":"41","hashOfConfig":"23"},{"size":7960,"mtime":1611825356007,"results":"42","hashOfConfig":"23"},{"size":395,"mtime":1611569319019,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qcrdze",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\App.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\routes\\routes.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\routes\\Routes.tsx",["90"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\index.tsx",[],["91","92"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\NavbarComp.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\index.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\reducers\\regionReducer.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\store.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\actions\\regionAction.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\constants\\regionConstants.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\pages\\index.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\Footer.tsx",[],["93","94"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\pages\\SearchPage.tsx",["95","96","97","98","99","100","101"],"import React, { ChangeEvent, KeyboardEvent, MouseEvent, useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { initialAppStateType } from '../store';\r\nimport { FaSearch } from \"react-icons/fa\";\r\nimport { Loading } from '../components/Loading';\r\nimport { API, TEST_BASE } from '../config/index';\r\nimport { buildStyles, CircularProgressbar } from 'react-circular-progressbar';\r\nimport { changeRegion } from '../actions/regionAction';\r\nimport { Link } from 'react-router-dom';\r\nimport { GameMatcheType, SummonerDetailType, SummonerInfoType } from '../types';\r\nimport { UserMatchHistory } from '../components/UserMatchHistory';\r\n\r\nexport const SearchPage = () => {\r\n    const USER_ID = 'user account id';\r\n    const regionStore = useSelector((state: initialAppStateType) => state.regionStore);\r\n    const { region } = regionStore;\r\n    // console.log('region: ', region)\r\n    const [summonerID, setSummonerID] = useState('');\r\n    const [errorMsg, setErrorMsg] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [inputText, setInputText] = useState('');\r\n    const [{ id, name, profileIconId, level, accountId }, setSummonerInfo] = useState<SummonerInfoType>({\r\n        id: '',\r\n        name: '',\r\n        profileIconId: 0,\r\n        level: 0,\r\n        accountId: '',\r\n    });\r\n    const [{ queueType, tier, rank, leaguePoints, wins, losses }, setSummonerDetail] = useState<SummonerDetailType>({\r\n        queueType: '',\r\n        tier: '',\r\n        rank: '',\r\n        leaguePoints: 0,\r\n        wins: 0,\r\n        losses: 0,\r\n\r\n    });\r\n    const gameId: number[] = [];\r\n    const [gameIdInfo, setGameIdInfo] = useState<number[]>([]);\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const newInput = e.target.value;\r\n        setSummonerID(newInput);\r\n    }\r\n    // console.log(\"1\")\r\n    // console.log(\"2\")\r\n    // 비동기 - 기다려주지 않는다\r\n    // 동기 - 기다려준다.\r\n    const handleClick = async (e: KeyboardEvent<HTMLInputElement | HTMLButtonElement>) => {\r\n        if (summonerID.length > 0) {\r\n            // console.log(`${API.GET_SUMMONER_BY_NAME}/${summonerID}?region=${region}`)\r\n            // const response = await fetch(`${API.GET_SUMMONER_BY_NAME}/${summonerID}?region=${region}`);\r\n            const response = await fetch(`${TEST_BASE}/summonorById/proxy/${summonerID}/${region}`);\r\n            const data = await response.json();\r\n            // console.log(summonerID);\r\n            // console.log(data);\r\n            if (data.status === undefined) { // data를 뽑아오면 status 가 나타나지 않고 data가 없을경우에 data.status.status_code: 404 이런식으로 리턴 된다.\r\n                // console.log('data 있음')\r\n                // 유저의 고유 아이디를 로컬스토리지에 저장\r\n                localStorage.setItem(USER_ID, data.id);\r\n                // console.log(data.id);\r\n\r\n                setErrorMsg(false)\r\n                setSummonerInfo({\r\n                    id: data.id,\r\n                    name: data.name,\r\n                    profileIconId: data.profileIconId,\r\n                    level: data.summonerLevel,\r\n                    accountId: data.accountId,\r\n                });\r\n            } else {\r\n                // console.log('data 없음')\r\n                setErrorMsg(true);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //     if (!errorMsg)\r\n    //         console.log('loading')\r\n    // }, [id])\r\n\r\n    // 두번 setState를 불러 오게 되면 랜더링 때문에 문제가 발생한다. 그래서 의존성배열에 id값을 두고 id값이 변하게 되면 fetch를 통해 setState 를 하게 된다.\r\n    // 검색한 유저의 세부 정보 가져옴\r\n    useEffect(() => {\r\n        if (id) {\r\n            (async () => {\r\n                // const response2 = await fetch(`${API.GET_SUMMONER_DETAIL_BY_ID}/18DGpAfpkizFV_QeZruhnqFhjao8lcwqhzHKxbOcqfFRXA`)\r\n                // console.log(id);\r\n                // const response = await fetch(`${API.GET_SUMMONER_DETAIL_BY_ID}/${id}?region=${region}`)\r\n                const response = await fetch(`${TEST_BASE}/summonorById/proxy/${id}/${region}/summonerDetail`);\r\n                // console.log('3');\r\n                const data = await response.json();\r\n                // console.log(data);\r\n                const typedData = data as SummonerDetailType[];\r\n                const [details] = typedData;\r\n                // console.log(details);\r\n                setSummonerDetail({\r\n                    queueType: details.queueType,\r\n                    tier: details.tier,\r\n                    rank: details.rank,\r\n                    leaguePoints: details.leaguePoints,\r\n                    wins: details.wins,\r\n                    losses: details.losses,\r\n                });\r\n                setIsLoading(false)\r\n            })();\r\n        }\r\n    }, [id, region]);\r\n\r\n\r\n\r\n    // 해당유저의 게임 했던것들 정보 가져옴 총 100개\r\n    useEffect(() => {\r\n        // console.log('match')\r\n        if (tier) {\r\n            (\r\n                async () => {\r\n                    // console.log(accountId)\r\n                    // const response = await fetch(`${API.GET_MATCH_ID}/${accountId}?region=${region}`)\r\n                    const response = await fetch(`${TEST_BASE}/summonorById/proxy/${accountId}/${region}/matchId`);\r\n                    const data = await response.json();\r\n                    const typedData = data as GameMatcheType;\r\n                    const { matches } = typedData;\r\n                    // for (let i = 0; i < 100; i++) {\r\n                    //     gameId.push(matches[i].gameId);\r\n                    // }\r\n                    matches.map((match) => gameId.push(match.gameId));\r\n                    setGameIdInfo([...gameId]);\r\n                }\r\n            )();\r\n        }\r\n    }, [accountId, region, tier]);\r\n\r\n    // useEffect(() => {\r\n    //     console.log('gameIdInfo: ' + gameIdInfo)\r\n\r\n\r\n    //     if (gameIdInfo[0]) {\r\n    //         (\r\n    //             async () => {\r\n    //                 console.log('gameId: ' + gameId);\r\n    //                 console.log(profileIconId)\r\n    //                 // const response = await fetch(`${API.GET_MATCH_DETAILS}/${gameIdInfo[1]}?region=${region}`);\r\n    //                 const response = await fetch(`${TEST_BASE}/summonorById/proxy/${accountId}/${region}/matchDetail`);\r\n    //                 const data = await response.json();\r\n    //                 console.log(data);\r\n    //             }\r\n    //         )();\r\n\r\n    //         setIsLoading(false);\r\n    //     }\r\n    // }, [gameIdInfo]);\r\n\r\n\r\n    // input 에 focusing useRef() 사용\r\n    const focusRef = useRef<HTMLInputElement>(null);\r\n    useEffect(() => {\r\n        if (focusRef && focusRef.current !== null) {\r\n            focusRef.current.focus();\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"wrap\">\r\n\r\n            <div className=\"search\">\r\n                {/* <input type=\"text\" className=\"summoner-id\" placeholder=\"Enter the Summoner's ID\" onChange={e => setSummonerID(e.target.value)} value={summonerID} /> */}\r\n                <input type=\"text\" className=\"searchTerm\" placeholder=\"Enter the Summoner's ID\" onChange={handleChange} onKeyPress={\r\n                    (e) => {\r\n                        if (e.key === 'Enter')\r\n                            handleClick(e);\r\n                    }\r\n                } ref={focusRef} />\r\n                <button type=\"submit\" className=\"searchButton\" onClick={(e: MouseEvent<HTMLButtonElement>) => handleClick(e as any)}>\r\n                    <FaSearch />\r\n                </button>\r\n            </div>\r\n\r\n            {/* 아래에 꺼 붙여 넣으면 됨 */}\r\n            {\r\n                !errorMsg ?\r\n                    (\r\n                        // 이렇게 하면 반드시 id가 존재하고 isLoading 이 true 인 경우에 아래 식을 실행 시키도록 한다 즉, 검색어에 유저의 이름을 입력하고 검색을 해야 loading이나 결과가 나타난다.\r\n                        id && isLoading ?\r\n\r\n                            <div className=\"loading\" >\r\n                                <Loading />\r\n                            </div>\r\n                            :\r\n                            <div className=\"summoner-info\">\r\n                                {\r\n                                    name.length > 0 && tier.length > 0 &&\r\n                                    <div>\r\n                                        <div className=\"summoner_info_top\">\r\n                                            <Link className=\"logo-name-link link\" to={\r\n                                                {\r\n                                                    pathname: '/search/userInfo/userMatchHistory',\r\n                                                    state: {\r\n                                                        gameIdInfo: gameIdInfo,\r\n                                                        accountId: accountId,\r\n                                                        id: id,\r\n                                                    }\r\n                                                }\r\n                                            }\r\n\r\n                                            >\r\n                                                <img className=\"logo-img\" src={`${API.GET_PROFILEICON}/${profileIconId}.png`} alt=\"profileIcon\" />\r\n                                                <span className=\"level\">{level}</span>\r\n                                                <span className=\"name\">{name}</span>\r\n                                            </Link>\r\n                                        </div>\r\n\r\n                                        <div className=\"summoner_info_bottom\">\r\n                                            <div className=\"summoner_info_bottom_left\">\r\n\r\n                                                <div className=\"detail-info custom_card\">\r\n                                                    <div className=\"detail_title\">Rank</div>\r\n                                                    <div className=\"detail-parent\">\r\n                                                        <img className=\"emblem-img\" src={`/images/ranked-emblems/${tier}.png`} alt=\"tier-emblem\" />\r\n\r\n                                                        <div className=\"detail\">\r\n                                                            <span className=\"queue-type\">{queueType}</span>\r\n                                                            <div className=\"tier-lp\">\r\n                                                                <span className=\"tier\">{tier} <span className=\"rank\">{rank}</span> </span>\r\n                                                                <span className=\"lp\"> / {leaguePoints} LP</span>\r\n                                                            </div>\r\n                                                            <span className=\"win-lost\">{`${wins} W ${losses} L`}</span>\r\n                                                            <div className=\"winRate-totalGame\">\r\n                                                                <span className=\"winRate\">{`${Math.round(wins / (wins + losses) * 100)}%`}</span>\r\n                                                                <span className=\"totalGame\">{wins + losses} games</span>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className=\"custom_card detail_graph\">\r\n                                                    역대 기록 그래프\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                            <div className=\"summoner_info_bottom_right\">\r\n                                                {\r\n                                                    // gameIdInfo 를 다 받으면 길이가 0 이상이겠지 그러면 랜더 되도록\r\n                                                    gameIdInfo.length > 0 && accountId &&\r\n                                                    <UserMatchHistory gameIdInfo={gameIdInfo} accountId={accountId} id={id} />\r\n\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                    )\r\n                    :\r\n                    <div className=\"summoner-error\">This summoner is not registered at POPO.GG.<br /> Please check spelling and region</div>\r\n            }\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// {\r\n//     !errorMsg ?\r\n//     (\r\n//         // 이렇게 하면 반드시 id가 존재하고 isLoading 이 true 인 경우에 아래 식을 실행 시키도록 한다 즉, 검색어에 유저의 이름을 입력하고 검색을 해야 loading이나 결과가 나타난다.\r\n//         id && isLoading ?\r\n\r\n//             <div className=\"loading\" >\r\n//                 <Loading />\r\n//             </div>\r\n//             :\r\n//             <div className=\"summoner-info\">\r\n//                 {\r\n//                     name.length > 0 && tier.length > 0 &&\r\n//                     <div>\r\n//                         <Link className=\"logo-name-link link\" to={\r\n//                             {\r\n//                                 pathname: '/search/userInfo/userMatchHistory',\r\n//                                 state: {\r\n//                                     gameIdInfo: gameIdInfo,\r\n//                                     accountId: accountId,\r\n//                                     id: id,\r\n//                                 }\r\n//                             }\r\n//                         }\r\n\r\n//                         >\r\n//                             <img className=\"logo-img\" src={`${API.GET_PROFILEICON}/${profileIconId}.png`} alt=\"profileIcon\" />\r\n//                             <span className=\"level\">{level}</span>\r\n//                             <span className=\"name\">{name}</span>\r\n//                         </Link>\r\n//                         <div className=\"detail-info\">\r\n//                             <img className=\"emblem-img\" src={require(`../images/ranked-emblems/${tier}.png`)} alt=\"tier-emblem\" />\r\n//                             <div className=\"detail-parent\">\r\n//                                 <div className=\"detail\">\r\n//                                     <span className=\"tier\">{tier}</span>\r\n\r\n//                                     <span className=\"lp\">LP: {leaguePoints} LP</span>\r\n//                                     <span className=\"win-lost\">{`${wins} W ${losses} L`}</span>\r\n//                                     <span className=\"rank\">{rank}</span>\r\n//                                     <span className=\"queue-type\">{queueType}</span>\r\n//                                 </div>\r\n//                             </div>\r\n//                             <div className=\"circle\">\r\n//                                 {/* https://github.com/kevinsqi/react-circular-progressbar 여기 참고하면됨 */}\r\n//                                 <CircularProgressbar strokeWidth=\"10\" value={`${Math.round(wins / (wins + losses) * 100)}`} text={`${Math.round(wins / (wins + losses) * 100)}%`} className=\"percentage-circle\"\r\n//                                     styles={buildStyles({ textColor: 'white', pathColor: '#2E6DEB', trailColor: '#F05950' })}\r\n//                                 />;\r\n//                                         </div>\r\n//                         </div>\r\n//                     </div>\r\n//                 }\r\n//             </div>\r\n//     )\r\n//     :\r\n//     <div className=\"summoner-error\">This summoner is not registered at POPO.GG.<br /> Please check spelling and region</div>\r\n// }\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\config\\index.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\reducers\\initialDataReducer.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\actions\\initialDataAction.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\constants\\initialDataConstants.ts",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\pages\\MainPage.tsx",[],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\UserMatchHistory.tsx",["102","103","104","105","106","107"],"\r\n\r\n\r\nimport React, { useState } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport { API, TEST_BASE } from '../config';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Accordion, Card, Button } from 'react-bootstrap';\r\nimport { MatchedGameDetail } from './MatchedGameDetail';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Loading } from './Loading';\r\nimport { initialAppStateType } from '../store';\r\nimport { ChampDetailType, GameImageType, MatchedGameType, ParticipantsStatsType, ParticipantsType, RuneBigType, RunesIngameType, SpellDetailType, SpellsIngameType } from '../types';\r\nconst darkgery = \"/images/darkgrey.png\";\r\nexport interface LocationType {\r\n    gameIdInfo: number[];\r\n    accountId: string;\r\n    id: string;\r\n}\r\n\r\nexport interface SpellsStringType {\r\n    spell1: string;\r\n    spell2: string;\r\n}\r\n\r\nexport interface UserMatchHistoryPropsType {\r\n    gameIdInfo: number[];\r\n    accountId: string;\r\n    id: string;\r\n}\r\n\r\nexport const UserMatchHistory: React.FC<UserMatchHistoryPropsType> = ({ accountId, gameIdInfo, id }) => {\r\n    const regionStore = useSelector((state: initialAppStateType) => state.regionStore);\r\n    const { region } = regionStore;\r\n    const { isLoading, champs } = useSelector((state: initialAppStateType) => state.champsStore);\r\n    const { spells } = useSelector((state: initialAppStateType) => state.spellsStore);\r\n    const { runes } = useSelector((state: initialAppStateType) => state.runesStore);\r\n    // const location = useLocation<LocationType>();\r\n    const [pageLoading, setPageLoading] = useState(true);\r\n    // console.log(location.state)\r\n    // const accountId = location.state.accountId;\r\n    // console.log(accountId)\r\n    const [matchesInfo, setMatchesInfo] = useState<MatchedGameType[]>([]);\r\n    const [loaded, setLoaded] = useState(false);\r\n    // const [...gameIds] = location.state.gameIdInfo;\r\n    // console.log(gameIds);\r\n\r\n    const matchesData: MatchedGameType[] = [];\r\n    const [summonerDetail, setSummonerDetail] = useState<ParticipantsType[]>([]);\r\n    const [result, setResult] = useState<boolean[]>([]);\r\n\r\n    const dispatch = useDispatch();\r\n    const [allChampsData, setAllChampsData] = useState<ChampDetailType[]>([]);\r\n    const [allSpellsData, setAllSpellsData] = useState<SpellDetailType[]>([]);\r\n    const [allRunesData, setAllRunesData] = useState<RuneBigType[]>([]);\r\n\r\n\r\n\r\n    const champImages: GameImageType[] = [];\r\n    const spellsArr: SpellsIngameType[] = [];\r\n    const runesArr: RunesIngameType[] = [];\r\n    const [information, setInformation] = useState<GameImageType[]>([]);\r\n\r\n    const [start, setStart] = useState(0);\r\n    const [loadMore, setLoadMore] = useState(false);\r\n    const [matchesAllInfo, setMatchesAllInfo] = useState<MatchedGameType[]>([]);\r\n    // console.log(start)\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log('fetch 한거 set한다. 2')\r\n        setAllChampsData(Object.values(champs))\r\n        setAllSpellsData(Object.values(spells));\r\n        setAllRunesData(runes);\r\n    }, [champs, spells, runes]);\r\n\r\n    useEffect(() => {\r\n        (\r\n            async () => {\r\n                console.log('data 받음  3');\r\n                // console.log(start, start + 3)\r\n                for (let i = start; i < start + 3; i++) {\r\n                    // console.log(start)\r\n                    // console.log('for문들어옴')\r\n                    // server 측에 path 가 '/' 이곳으로 들어와서 프록시 서버를 통해서 정보를 호출한다.\r\n                    // const response = await fetch(`${API.GET_MATCH_DETAILS}/${gameIds[i]}?region=${region}`);\r\n                    const response = await fetch(`${TEST_BASE}/summonorById/proxy/${gameIdInfo[i]}/${region}/matchList`);\r\n                    const data = await response.json();\r\n                    matchesData.push(data);\r\n\r\n                }\r\n                // console.log(matchesData);\r\n\r\n                const newData = matchesAllInfo.concat(matchesData);\r\n\r\n                setMatchesAllInfo(newData);\r\n\r\n                setMatchesInfo(matchesData);\r\n                setLoaded(true);\r\n            }\r\n\r\n        )();\r\n    }, [start]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log('loaded 되서 들어옴  4');\r\n        // console.log(matchesInfo)\r\n        // console.log(loaded)\r\n        if (loaded) {\r\n            // console.log('matchesinfo check')\r\n            // console.log(matchesInfo)\r\n            const participantId = matchesInfo.map((data) => data.participantIdentities.filter((data) => data.player.accountId === accountId)[0].participantId);\r\n            // console.log(participantId);\r\n            const summonorMatchDetail = matchesInfo.map((data, index) => data.participants.filter((data) => data.stats.participantId === participantId[index])[0])\r\n            // console.log(\"매치 디테일: \", summonorMatchDetail);\r\n            setSummonerDetail(summonorMatchDetail);\r\n\r\n            const playResult = summonorMatchDetail.map((data) => data.stats.win)\r\n            // console.log(playResult);\r\n            setResult(playResult);\r\n\r\n        }\r\n\r\n    }, [matchesInfo, loaded, accountId])\r\n    // const { gameDuration, gameMode, participantIdentities, participants, teams } = matchesInfo;\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log('isLoading', isLoading)\r\n        // console.log('summonerDetail', summonerDetail)\r\n\r\n        console.log('룬, 스펠, 챔프 뽑음. 5')\r\n        if (!isLoading && summonerDetail.length > 0) {\r\n            // console.log('룬, 스펠, 챔프 뽑으러 if 문안에 들어옴')\r\n            // console.log(allChampsData);\r\n            // console.log(allRunesData);\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                spellsArr.push({\r\n                    spell1: summonerDetail[i].spell1Id as number,\r\n                    spell2: summonerDetail[i].spell2Id as number,\r\n                });\r\n            }\r\n\r\n            // console.log(allSpellsData);\r\n            // console.log(spellsArr);\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                runesArr.push({\r\n                    primaryRune: summonerDetail[i].stats.perkPrimaryStyle as number,\r\n                    subRune: summonerDetail[i].stats.perkSubStyle as number,\r\n                })\r\n            };\r\n            console.log(runesArr);\r\n\r\n            // // 해당하는 룬 뽑는 함수\r\n            const usedRunes: any[] = runesArr.map(rune => {\r\n                // console.log('Object.entries(rune) ==> ', Object.entries(rune))\r\n                const obj: any = {};\r\n                for (const [key, value] of Object.entries(rune)) {\r\n                    obj[key] = allRunesData.find(data => data.id === value)?.icon\r\n                }\r\n                return obj\r\n            });\r\n            // console.log(usedRunes);\r\n\r\n            // // 해당하는 스펠 뽑는 함수\r\n            // console.log(spellsArr)\r\n            const usedSpells: any[] = spellsArr.map(spell => {\r\n                // console.log(Object.entries(spell));\r\n                const obj: any = {}\r\n                for (const [key, value] of Object.entries(spell)) {\r\n                    obj[key] = allSpellsData.find(data => Number(data.key) === value)?.id;\r\n                }\r\n                // console.log(obj)\r\n                return obj\r\n            });\r\n            console.log(usedSpells);\r\n\r\n            console.log(matchesInfo);\r\n\r\n            for (let j = 0; j < 3; j++) {\r\n                for (let i = 0; i < 150; i++) {\r\n                    if (Number(allChampsData[i].key) === summonerDetail[j].championId) {\r\n                        // console.log('같은거 있음')\r\n                        champImages.push(\r\n                            {\r\n                                createdGame: matchesAllInfo[j].gameCreation,\r\n                                gameDuration: matchesAllInfo[j].gameDuration,\r\n                                teams: matchesAllInfo[j].teams,\r\n                                gameId: matchesAllInfo[j].gameId,\r\n                                champImage: allChampsData[i].image.full,\r\n                                item0: summonerDetail[j].stats.item0,\r\n                                item1: summonerDetail[j].stats.item1,\r\n                                item2: summonerDetail[j].stats.item2,\r\n                                item3: summonerDetail[j].stats.item3,\r\n                                item4: summonerDetail[j].stats.item4,\r\n                                item5: summonerDetail[j].stats.item5,\r\n                                item6: summonerDetail[j].stats.item6,\r\n                                spell1: usedSpells[j].spell1,\r\n                                spell2: usedSpells[j].spell2,\r\n                                gold: summonerDetail[j].stats.goldEarned,\r\n                                ward: summonerDetail[j].stats.wardsPlaced,\r\n                                kills: summonerDetail[j].stats.kills,\r\n                                assists: summonerDetail[j].stats.assists,\r\n                                deaths: summonerDetail[j].stats.deaths,\r\n                                minionKillded: summonerDetail[j].stats.totalMinionsKilled,\r\n                                rate: ((summonerDetail[j].stats.kills + summonerDetail[j].stats.assists) / summonerDetail[j].stats.deaths).toFixed(2),\r\n                                gameResult: result[j] ? 'Victory' : 'Defeat',\r\n                                level: summonerDetail[j].stats.champLevel,\r\n                                mainRune: usedRunes[j].primaryRune,\r\n                                subRune: usedRunes[j].subRune,\r\n\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n            const newData = information.concat(champImages);\r\n\r\n\r\n            setInformation(newData);\r\n            setPageLoading(false);\r\n            setLoadMore(false) // 로드하는 버튼 누르면 로딩이 시작되기 때문에 데이터를 다 로드하면 false로 해서 로딩 컴포넌트가 종료되고 다시 버튼이 뜬다.\r\n            console.log(champImages);\r\n\r\n\r\n        }\r\n\r\n\r\n    }, [allChampsData, summonerDetail])\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // 게임 언제 했는지 뽑아내는 함수\r\n    const getPlayGameDate = (unixTime: number) => {\r\n        const timeGap: number = Number(new Date()) - unixTime;\r\n        let stime = timeGap / 1000;\r\n        const year = 86400 * (365.25);\r\n        const month = 86400 * 30.4375;\r\n        const day = 86400;\r\n        const hour = 3600;\r\n        const min = 60;\r\n\r\n        if (stime >= year) return (`${stime / year === 1 ? `${(stime / year).toFixed(0)} year ago` : `${(stime / year).toFixed(0)} years ago`}`);\r\n        if (stime >= month) return (`${stime / month === 1 ? `${(stime / month).toFixed(0)} month ago` : `${(stime / month).toFixed(0)} months ago`}`);\r\n        if (stime >= day) return (`${stime / day === 1 ? `${(stime / day).toFixed(0)} day ago` : `${(stime / day).toFixed(0)} days ago`}`);\r\n        if (stime >= hour) return (`${stime / hour === 1 ? `${(stime / hour).toFixed(0)} hour ago` : `${(stime / hour).toFixed(0)} hours ago`}`);\r\n        return (stime / min).toFixed(0) + \"minutes ago\";\r\n    }\r\n\r\n    // 게임 시간 뽑아내는 함수\r\n    const getPlayDuration = (duration: number) => {\r\n        if (duration >= 3600) {\r\n            const hours = Math.floor(duration / 3600);\r\n            const minutes = Math.floor((duration - 3600) / 60);\r\n            const seconds = duration - 3600 - (minutes * 60);\r\n            return (\r\n                `${hours === 1 ? hours + ' hour' : hours + ' hours'} ${minutes === 1 ? minutes + ' min' : minutes + ' mins'} ${seconds === 1 || seconds === 0 ? seconds + ' sec' : seconds + ' secs'}`\r\n            )\r\n        } else {\r\n            const minutes = Math.floor(duration / 60);\r\n            const seconds = duration - (minutes * 60);\r\n            return (\r\n                ` ${minutes === 1 ? minutes + ' min' : minutes + ' mins'} ${seconds === 1 || seconds === 0 ? seconds + ' sec' : seconds + ' secs'}`\r\n            )\r\n        }\r\n    }\r\n\r\n    const handleStartClicked = () => {\r\n        console.log('button clicked')\r\n        setLoadMore(true);\r\n        setStart(start + 3);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={pageLoading ? 'laoding-page' : 'matchHistory-page'}>\r\n                {\r\n                    pageLoading ?\r\n                        <div className=\"loading\" >\r\n                            <Loading />\r\n                        </div>\r\n                        :\r\n                        <div>\r\n                            {\r\n                                information.map((data, index) => {\r\n                                    return (\r\n                                        <div className=\"accordion-page\" key={index}>\r\n                                            <Accordion key={index} className=\"accordion\">\r\n                                                <div className=\"card\">\r\n                                                    {console.log('data.gameResult: ==> ', data.gameResult)}\r\n                                                    <div className={`card-header ${data.gameResult === 'Victory' ? 'win' : 'lose'} `}>\r\n                                                        <Accordion.Toggle as={Button} variant=\"link\" eventKey={data.gameId.toString()} className=\"accordion-toggle link\">\r\n                                                            <div className=\"first-info\">\r\n                                                                {console.log('getPlayGameDate(data.createdGame) ==>> ', getPlayGameDate(data.createdGame))}\r\n                                                                <span className=\"created-game\">{getPlayGameDate(data.createdGame)}</span>\r\n                                                                <span className=\"game-duration\">{getPlayDuration(data.gameDuration)}</span>\r\n                                                                <span className={`game-result ${data.gameResult === \"Win\" ? 'win_text' : 'lose_text'}`}>{data.gameResult}</span>\r\n                                                            </div>\r\n                                                            <div className=\"second-info\">\r\n                                                                <div className=\"level-champ\">\r\n                                                                    <span className=\"level\">{data.level}</span>\r\n                                                                    <img className=\"champ-image\" src={`${API.GET_CHAMPION_SQUARE_IMG}/${data.champImage}`} alt=\"images\" />\r\n                                                                </div>\r\n                                                                <div className=\"spells-runes\">\r\n                                                                    <div className=\"spells\">\r\n                                                                        <span><img className=\"spell\" src={`${API.GET_SPELLS_IMG}/${data.spell1}.png`} alt=\"images\" /></span>\r\n                                                                        <span><img className=\"spell\" src={`${API.GET_SPELLS_IMG}/${data.spell2}.png`} alt=\"images\" /></span>\r\n                                                                    </div>\r\n                                                                    <div className=\"runes\">\r\n                                                                        <span><img className=\"rune\" src={`${API.GET_RUNES_IMG}/${data.mainRune}`} alt=\"images\" /></span>\r\n                                                                        <span><img className=\"rune\" src={`${API.GET_RUNES_IMG}/${data.subRune}`} alt=\"images\" /></span>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"third-info\">\r\n                                                                <span className=\"gold\">{data.gold.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")} G</span> {/* 골드 세칸당 콤마(,) 찍는 함수 */}\r\n                                                                <span className=\"rate\">{data.rate}</span>\r\n                                                                <div className=\"kda\">\r\n                                                                    <span className=\"kills\">{data.kills}</span> / <span className=\"deaths\">{data.deaths}</span> / <span className=\"assists\">{data.deaths}</span>\r\n                                                                </div>\r\n                                                                <span className=\"cs\">{data.minionKillded} ({`${(data.minionKillded / 60).toFixed(1)}`}) CS</span>\r\n                                                            </div>\r\n\r\n                                                            <div className=\"forth-info\">\r\n                                                                <div>\r\n                                                                    {data.item0 === 0 ? <span><img className=\"item\" src={darkgery} alt=\"empty\" /></span> : <span><img className=\"item\" src={`${API.GET_ITEMS_IMG}/${data.item0}.png`} alt=\"images\" /></span>}\r\n                                                                    {data.item1 === 0 ? <span><img className=\"item\" src={darkgery} alt=\"empty\" /></span> : <span><img className=\"item\" src={`${API.GET_ITEMS_IMG}/${data.item1}.png`} alt=\"images\" /></span>}\r\n                                                                    {data.item2 === 0 ? <span><img className=\"item\" src={darkgery} alt=\"empty\" /></span> : <span><img className=\"item\" src={`${API.GET_ITEMS_IMG}/${data.item2}.png`} alt=\"images\" /></span>}\r\n                                                                </div>\r\n                                                                <div>\r\n                                                                    {data.item3 === 0 ? <span><img className=\"item\" src={darkgery} alt=\"empty\" /></span> : <span><img className=\"item\" src={`${API.GET_ITEMS_IMG}/${data.item3}.png`} alt=\"images\" /></span>}\r\n                                                                    {data.item4 === 0 ? <span><img className=\"item\" src={darkgery} alt=\"empty\" /></span> : <span><img className=\"item\" src={`${API.GET_ITEMS_IMG}/${data.item4}.png`} alt=\"images\" /></span>}\r\n                                                                    {data.item5 === 0 ? <span><img className=\"item\" src={darkgery} alt=\"empty\" /></span> : <span> <img className=\"item\" src={`${API.GET_ITEMS_IMG}/${data.item5}.png`} alt=\"images\" /></span>}\r\n                                                                    {data.item6 === 0 ? <span><img className=\"item\" src={darkgery} alt=\"empty\" /></span> : <span><img className=\"item\" src={`${API.GET_ITEMS_IMG}/${data.item6}.png`} alt=\"images\" /></span>}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </Accordion.Toggle>\r\n                                                    </div>\r\n                                                    <Accordion.Collapse eventKey={data.gameId.toString()}>\r\n                                                        <div className=\"card-body\"><MatchedGameDetail clickedData={data} matchesInfo={matchesAllInfo[index]} allChampsData={allChampsData} allSpellsData={allSpellsData} allRunesData={allRunesData} /></div>\r\n                                                    </Accordion.Collapse>\r\n                                                </div>\r\n\r\n                                            </Accordion>\r\n\r\n                                        </div>\r\n\r\n                                    )\r\n\r\n                                }\r\n                                )\r\n                            }\r\n\r\n                            <div className=\"load-data-button\">\r\n                                {loadMore ? <Loading /> : <button className=\"load-button\" onClick={() => handleStartClicked()}>button</button>}\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                }\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\MatchedGameDetail.tsx",["108","109","110","111"],"C:\\Users\\703922\\.vscode\\React\\React_TypeScript\\LeagueOfLegends-TypeScript\\client\\src\\components\\Loading.tsx",[],{"ruleId":"112","severity":1,"message":"113","line":2,"column":25,"nodeType":"114","messageId":"115","endLine":2,"endColumn":30},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"116","replacedBy":"120"},{"ruleId":"118","replacedBy":"121"},{"ruleId":"112","severity":1,"message":"122","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":21},{"ruleId":"112","severity":1,"message":"123","line":7,"column":10,"nodeType":"114","messageId":"115","endLine":7,"endColumn":21},{"ruleId":"112","severity":1,"message":"124","line":7,"column":23,"nodeType":"114","messageId":"115","endLine":7,"endColumn":42},{"ruleId":"112","severity":1,"message":"125","line":8,"column":10,"nodeType":"114","messageId":"115","endLine":8,"endColumn":22},{"ruleId":"112","severity":1,"message":"126","line":21,"column":12,"nodeType":"114","messageId":"115","endLine":21,"endColumn":21},{"ruleId":"112","severity":1,"message":"127","line":21,"column":23,"nodeType":"114","messageId":"115","endLine":21,"endColumn":35},{"ruleId":"128","severity":1,"message":"129","line":137,"column":8,"nodeType":"130","endLine":137,"endColumn":33,"suggestions":"131"},{"ruleId":"112","severity":1,"message":"132","line":5,"column":10,"nodeType":"114","messageId":"115","endLine":5,"endColumn":21},{"ruleId":"112","severity":1,"message":"133","line":9,"column":21,"nodeType":"114","messageId":"115","endLine":9,"endColumn":25},{"ruleId":"112","severity":1,"message":"134","line":14,"column":59,"nodeType":"114","messageId":"115","endLine":14,"endColumn":80},{"ruleId":"112","severity":1,"message":"135","line":53,"column":11,"nodeType":"114","messageId":"115","endLine":53,"endColumn":19},{"ruleId":"128","severity":1,"message":"136","line":104,"column":8,"nodeType":"130","endLine":104,"endColumn":15,"suggestions":"137"},{"ruleId":"128","severity":1,"message":"138","line":235,"column":8,"nodeType":"130","endLine":235,"endColumn":39,"suggestions":"139"},{"ruleId":"112","severity":1,"message":"140","line":2,"column":17,"nodeType":"114","messageId":"115","endLine":2,"endColumn":31},{"ruleId":"112","severity":1,"message":"141","line":25,"column":46,"nodeType":"114","messageId":"115","endLine":25,"endColumn":57},{"ruleId":"112","severity":1,"message":"142","line":25,"column":147,"nodeType":"114","messageId":"115","endLine":25,"endColumn":158},{"ruleId":"112","severity":1,"message":"143","line":25,"column":160,"nodeType":"114","messageId":"115","endLine":25,"endColumn":171},"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","no-native-reassign",["144"],"no-negated-in-lhs",["145"],["144"],["145"],"'useDispatch' is defined but never used.","'buildStyles' is defined but never used.","'CircularProgressbar' is defined but never used.","'changeRegion' is defined but never used.","'inputText' is assigned a value but never used.","'setInputText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameId'. Either include it or remove the dependency array.","ArrayExpression",["146"],"'useLocation' is defined but never used.","'Card' is defined but never used.","'ParticipantsStatsType' is defined but never used.","'dispatch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'gameIdInfo', 'matchesAllInfo', 'matchesData', and 'region'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'allRunesData', 'allSpellsData', 'champImages', 'information', 'isLoading', 'matchesAllInfo', 'matchesInfo', 'result', 'runesArr', and 'spellsArr'. Either include them or remove the dependency array.",["148"],"'SyntheticEvent' is defined but never used.","'doubleKills' is assigned a value but never used.","'tripleKills' is assigned a value but never used.","'wardsPlaced' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},"Update the dependencies array to be: [accountId, gameId, region, tier]",{"range":"155","text":"156"},"Update the dependencies array to be: [gameIdInfo, matchesAllInfo, matchesData, region, start]",{"range":"157","text":"158"},"Update the dependencies array to be: [allChampsData, allRunesData, allSpellsData, champImages, information, isLoading, matchesAllInfo, matchesInfo, result, runesArr, spellsArr, summonerDetail]",{"range":"159","text":"160"},[5633,5658],"[accountId, gameId, region, tier]",[4127,4134],"[gameIdInfo, matchesAllInfo, matchesData, region, start]",[9889,9920],"[allChampsData, allRunesData, allSpellsData, champImages, information, isLoading, matchesAllInfo, matchesInfo, result, runesArr, spellsArr, summonerDetail]"]